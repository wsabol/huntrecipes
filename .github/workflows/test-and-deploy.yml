# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Test and Deploy

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  check_lib_changes:
    name: Check lib/ changes
    runs-on: ubuntu-latest
    # Declare outputs for next jobs
    outputs:
      build: ${{ steps.diff.outputs.found-changes }}
    steps:
      - uses: actions/checkout@v2
        with:
          # Checkout as many commits as needed for the diff
          fetch-depth: 2
      - shell: pwsh
        id: diff
        run: |
          # Diff HEAD with the previous commit
          $diff = git diff --name-only HEAD^ HEAD

          # Check if a file under lib/
          $SourceDiff = $diff | Where-Object { $_ -match '^lib/' }
          HasDiff = $SourceDiff.Length -gt 0

          # Set the output named "libs_changed"
          echo "found-changes=${HasDiff}"
          echo "found-changes=${HasDiff}" >> $GITHUB_OUTPUT

#  test:
#    name: Test
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout project
#        uses: actions/checkout@v4
#
#      - name: Setup PHP Action
#        uses: shivammathur/setup-php@v2
#        with:
#          php-version: '8.2'
#          extensions: json, mysqli
#          tools: composer
#        id: php
#
#      - name: Write env file
#        run: |
#          touch .env
#          echo "DB_HOST=127.0.0.1" >> .env
#          echo "DB_USERNAME=testuser" >> .env
#          echo "DB_PASSWORD=testpsw" >> .env
#          echo "PRODUCTION=1" >> .env
#
#      - name: Install dependencies
#        run: composer install
#
#      - name: Run Tests
#        run: vendor/bin/phpunit tests --do-not-cache-result --colors

  build:
    name: Build & Deploy
#    needs: test
    needs: check_lib_changes
    if: needs.check_lib_changes.outputs.build == 'True'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci
        working-directory: 'lib'

      - name: Build project
        run: npm run build
        working-directory: 'lib'

      - name: Trigger pull
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          port: ${{ secrets.PORT }}
          script: |
            cd ${{ secrets.PATH_TO_REPO }}
            git pull

      - name: Deploy JS artifact
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          port: ${{ secrets.PORT }}
          source: 'js/*'
          target: ${{ secrets.PATH_TO_REPO }}

      - name: Deploy CSS artifact
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          port: ${{ secrets.PORT }}
          source: 'css/*'
          target: ${{ secrets.PATH_TO_REPO }}

  deploy:
    name: Trigger Pull
    needs: check_lib_changes
    if: needs.check_lib_changes.outputs.build == 'False'
    runs-on: ubuntu-latest

    steps:

      - name: Trigger pull
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          port: ${{ secrets.PORT }}
          script: |
            cd ${{ secrets.PATH_TO_REPO }}
            git pull
